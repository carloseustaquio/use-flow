/**
 
	This code was generated by ChatGPT

	- Example usage

	const jsonData = `
	{
		"name": "{name}",
		"age": "{age}",
		"address": {
			"street": "{street}",
			"city": "{city}"
		},
		"hobbies": [
			"{hobby1}",
			"{hobby2}"
		]
	}
	`;

	const variables = {
		"name": "John Doe",
		"age": "25",
		"street": "123 Main St",
		"city": "New York",
		"hobby1": "reading",
		"hobby2": "painting"
	};

	// Parse the JSON object
	const parsedJson: JsonValue = JSON.parse(jsonData);

	// Call the function to replace variables
	const updatedJson: JsonValue = replaceVariables(parsedJson, variables);

	// Convert the updated JSON back to string
	const updatedJsonStr: string = JSON.stringify(updatedJson, null, 2);

	console.log(updatedJsonStr);

	Output:
	{
		"name": "John Doe",
		"age": "25",
		"address": {
			"street": "123 Main St",
			"city": "New York"
		},
		"hobbies": [
			"reading",
			"painting"
		]
	}
 */

export interface JsonObject {
  [key: string]: JsonValue;
}

export type JsonValue = string | number | boolean | null | JsonObject | JsonValue[];

export function replaceVariables(jsonObj: JsonValue, variables: Record<string, string>): JsonValue {
  if (typeof jsonObj === "object" && jsonObj !== null) {
    if (Array.isArray(jsonObj)) {
      // If the value is an array, recursively process each item
      return jsonObj.map(item => replaceVariables(item, variables));
    } else {
      // If the value is an object, recursively process each property
      const newObject: JsonObject = {};
      for (const key in jsonObj) {
        if (jsonObj.hasOwnProperty(key)) {
          newObject[key] = replaceVariables(jsonObj[key], variables);
        }
      }
      return newObject;
    }
  } else if (typeof jsonObj === "string") {
    // If the value is a string, check for variable placeholders and replace them with corresponding values
    for (const variable in variables) {
      if (variables.hasOwnProperty(variable)) {
        const regex = new RegExp("{" + variable + "}", "g");
        jsonObj = jsonObj.replace(regex, variables[variable]);
      }
    }
    return jsonObj;
  } else {
    // For other types of values, no replacement is needed
    return jsonObj;
  }
}
